{
	"name": "DF_q1transformations",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DB_CustomerDetails",
						"type": "DatasetReference"
					},
					"name": "CustomerDetails"
				},
				{
					"dataset": {
						"referenceName": "OrderDetailSQL",
						"type": "DatasetReference"
					},
					"name": "OrderDetails"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CleanedCustomerData",
						"type": "DatasetReference"
					},
					"name": "CleanedCustomerData"
				},
				{
					"dataset": {
						"referenceName": "TransformedData",
						"type": "DatasetReference"
					},
					"name": "ReportingData"
				},
				{
					"dataset": {
						"referenceName": "ReportingData",
						"type": "DatasetReference"
					},
					"name": "MergedData"
				}
			],
			"transformations": [
				{
					"name": "CleaningCutomerDetails"
				},
				{
					"name": "PreparingData"
				},
				{
					"name": "join1"
				},
				{
					"name": "PreparingData2"
				},
				{
					"name": "FilteringData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerDetails",
				"source(output(",
				"          OrderID as string,",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Quantity as string,",
				"          OrderTimestamp as string,",
				"          Price as string,",
				"          CustomerID as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OrderDetails",
				"CustomerDetails derive(each(match(1==1), $$ = iifNull($$,toString(\"NULL\"))),",
				"          PhoneNumber1 = toInteger(replace(PhoneNumber,\"-\",\"\")),",
				"          ZipCode1 = toInteger(ZipCode),",
				"          FullName = FirstName+\" \"+LastName) ~> CleaningCutomerDetails",
				"CleaningCutomerDetails select(mapColumn(",
				"          CustomerID,",
				"          FullName,",
				"          Email,",
				"          Address,",
				"          City,",
				"          State,",
				"          Country,",
				"          PhoneNumber = PhoneNumber1,",
				"          ZipCode = ZipCode1",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PreparingData",
				"OrderDetails, PreparingData join(OrderDetails@CustomerID == PreparingData@CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          OrderID,",
				"          ProductID,",
				"          ProductName,",
				"          Quantity,",
				"          OrderTimestamp,",
				"          Price,",
				"          CustomerID = OrderDetails@CustomerID,",
				"          FullName,",
				"          Email,",
				"          Address,",
				"          City,",
				"          State,",
				"          Country,",
				"          PhoneNumber,",
				"          ZipCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PreparingData2",
				"PreparingData2 select(mapColumn(",
				"          OrderID,",
				"          ProductID,",
				"          ProductName,",
				"          Quantity,",
				"          OrderTimestamp,",
				"          Price,",
				"          CustomerID,",
				"          FullName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FilteringData",
				"PreparingData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedCustomerData",
				"PreparingData2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ReportingData",
				"FilteringData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MergedData"
			]
		}
	}
}