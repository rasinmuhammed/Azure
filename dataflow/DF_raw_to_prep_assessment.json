{
	"name": "DF_raw_to_prep_assessment",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "Quiz"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "Attempts"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "Users"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "Results"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedQuiz"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedAttempts"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedUsers"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedResults"
				}
			],
			"transformations": [
				{
					"name": "formattedDate1"
				},
				{
					"name": "DroppingPassword"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "Renaming"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          title as string,",
				"          question as string,",
				"          OPTION1 as string,",
				"          {option 2} as string,",
				"          {option 3} as string,",
				"          {option 4} as string,",
				"          answer as string,",
				"          {questions'][0]['_id_$oid} as string,",
				"          timer as string,",
				"          hasTimer as boolean,",
				"          quizId as string,",
				"          password as string,",
				"          createdBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Quiz",
				"source(output(",
				"          id as string,",
				"          user as string,",
				"          quizId as string,",
				"          questionId as string,",
				"          answer as string,",
				"          answersId as string,",
				"          date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Attempts",
				"source(output(",
				"          ID as string,",
				"          username as string,",
				"          email as string,",
				"          password as string,",
				"          role as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Users",
				"source(output(",
				"          id as string,",
				"          userid as string,",
				"          quizid as string,",
				"          questionid as string,",
				"          answer as string,",
				"          answerid as string,",
				"          score as string,",
				"          submissionDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Results",
				"Attempts derive(date = toDate(toTimestamp(toInteger(toLong(date) / toLong( 1000 ))* 1000l))) ~> formattedDate1",
				"Users select(mapColumn(",
				"          ID,",
				"          Name = username,",
				"          email,",
				"          role",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DroppingPassword",
				"Results derive(submissionDate = toDate(toTimestamp(toInteger(toLong(submissionDate) / toLong( 1000 ))* 1000l)),",
				"          score = toInteger(score)) ~> derivedColumn1",
				"Quiz select(mapColumn(",
				"          id,",
				"          title,",
				"          question,",
				"          {option 1} = OPTION1,",
				"          {option 2},",
				"          {option 3},",
				"          {option 4},",
				"          answer,",
				"          questionID = {questions'][0]['_id_$oid},",
				"          timer,",
				"          hasTimer,",
				"          quizId,",
				"          password,",
				"          createdBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Renaming",
				"Renaming sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedQuiz",
				"formattedDate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedAttempts",
				"DroppingPassword sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedUsers",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedResults"
			]
		}
	}
}