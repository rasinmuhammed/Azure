{
	"name": "DF_prep_to_reporting_assessment",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedQuiz"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedAttempts"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedResults"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "CleanedUsers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "NoOfQuiz"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "UserAttendedQuiz"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_assessment",
						"type": "DatasetReference"
					},
					"name": "AverageScore"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "join3"
				},
				{
					"name": "aggregate3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          title as string,",
				"          question as string,",
				"          {option 1} as string,",
				"          {option 2} as string,",
				"          {option 3} as string,",
				"          {option 4} as string,",
				"          answer as string,",
				"          questionID as string,",
				"          timer as string,",
				"          hasTimer as boolean,",
				"          quizId as string,",
				"          password as string,",
				"          createdBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CleanedQuiz",
				"source(output(",
				"          id as string,",
				"          user as string,",
				"          quizId as string,",
				"          questionId as string,",
				"          answer as string,",
				"          answersId as string,",
				"          date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CleanedAttempts",
				"source(output(",
				"          id as string,",
				"          userid as string,",
				"          quizid as string,",
				"          questionid as string,",
				"          answer as string,",
				"          answerid as string,",
				"          score as string,",
				"          submissionDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CleanedResults",
				"source(output(",
				"          ID as string,",
				"          Name as string,",
				"          email as string,",
				"          role as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CleanedUsers",
				"CleanedQuiz, CleanedUsers join(createdBy == Name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(Name),",
				"     {Number of Quizzes Created} = count(byName('id'))) ~> aggregate1",
				"CleanedAttempts, CleanedUsers join(user == CleanedUsers@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 aggregate(groupBy(Name),",
				"     {Number of Quizzes Attempted} = count(byName('id'))) ~> aggregate2",
				"CleanedResults, CleanedUsers join(userid == CleanedUsers@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 aggregate(groupBy(Name),",
				"     score = avg(toInteger(score))) ~> aggregate3",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> NoOfQuiz",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> UserAttendedQuiz",
				"aggregate3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AverageScore"
			]
		}
	}
}